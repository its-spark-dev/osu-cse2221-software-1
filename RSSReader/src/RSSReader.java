import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author S. Park
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Extract title, link, description from channel
         */
        String title = "Empty Title";
        int titleIndex = getChildElement(channel, "title");
        if (titleIndex != -1 && channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }
        String link = "";
        int linkIndex = getChildElement(channel, "link");
        if (linkIndex != -1 && channel.child(linkIndex).numberOfChildren() > 0) {
            link = channel.child(linkIndex).child(0).label();
        }
        String description = "No description";
        int descIndex = getChildElement(channel, "description");
        if (descIndex != -1 && channel.child(descIndex).numberOfChildren() > 0) {
            description = channel.child(descIndex).child(0).label();
        }

        /*
         * Output HTML header
         */
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        if (!link.isEmpty()) {
            out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        } else {
            out.println("<h1>" + title + "</h1>");
        }
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given XMLTree and returns its index; returns -1 if not found.
     *
     * @param xml
     *            the XMLTree to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the XMLTree or -1 if
     *         not found
     * @requires [the label of the root of xml is a tag]
     * @ensures getChildElement = [the index of the first child of type tag of
     *          the XMLTree or -1 if not found]
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            XMLTree child = xml.child(i);
            if (child.isTag() && child.label().equals(tag)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * cells: publication date, source, and title (or description).
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures out.content = #out.content * [an HTML table row with publication
     *          date, source, and title of news item]
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Extract publication date
         */
        String date = "No date available";
        int pubDateIndex = getChildElement(item, "pubDate");
        if (pubDateIndex != -1 && item.child(pubDateIndex).numberOfChildren() > 0) {
            date = item.child(pubDateIndex).child(0).label();
        }

        /*
         * Extract source and its URL
         */
        String source = "No source available";
        String sourceUrl = "";
        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex != -1) {
            XMLTree sourceNode = item.child(sourceIndex);
            sourceUrl = sourceNode.hasAttribute("url") ? sourceNode.attributeValue("url")
                    : "";
            if (sourceNode.numberOfChildren() > 0) {
                source = sourceNode.child(0).label();
            }
        }

        /*
         * Extract news title (or, if missing, description)
         */
        String newsText = "";
        int titleIndex = getChildElement(item, "title");
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            newsText = item.child(titleIndex).child(0).label().trim();
        }
        if (newsText.isEmpty()) {
            int descIndex = getChildElement(item, "description");
            if (descIndex != -1 && item.child(descIndex).numberOfChildren() > 0) {
                newsText = item.child(descIndex).child(0).label().trim();
            }
        }
        if (newsText.isEmpty()) {
            newsText = "No title available";
        }

        /*
         * Extract link for the news item
         */
        String link = "";
        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            link = item.child(linkIndex).child(0).label().trim();
        }

        /*
         * Output table row
         */
        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        if (!sourceUrl.isEmpty()) {
            out.println("<td><a href=\"" + sourceUrl + "\">" + source + "</a></td>");
        } else {
            out.println("<td>" + source + "</td>");
        }
        if (!link.isEmpty()) {
            out.println("<td><a href=\"" + link + "\">" + newsText + "</a></td>");
        } else {
            out.println("<td>" + newsText + "</td>");
        }
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an RSS 2.0 feed: ");
        String url = in.nextLine();

        XMLTree xml = new XMLTree1(url);
        if (!xml.label().equals("rss") || !xml.hasAttribute("version")
                || !xml.attributeValue("version").equals("2.0")) {
            out.println("Error: Invalid RSS 2.0 feed.");
            in.close();
            out.close();
            return;
        }

        int channelIndex = getChildElement(xml, "channel");
        if (channelIndex == -1) {
            out.println("Error: No channel found in RSS feed.");
            in.close();
            out.close();
            return;
        }
        XMLTree channel = xml.child(channelIndex);

        out.print("Enter the output HTML file name (without extension): ");
        String fileName = in.nextLine();
        if (!fileName.endsWith(".html")) {
            fileName = fileName + ".html";
        }
        SimpleWriter fileOut = new SimpleWriter1L(fileName);

        outputHeader(channel, fileOut);

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            XMLTree child = channel.child(i);
            if (child.isTag() && child.label().equals("item")) {
                processItem(child, fileOut);
            }
        }

        outputFooter(fileOut);

        fileOut.close();
        in.close();
        out.close();
    }
}
